{"name":"Rhumsaa\\Uuid","tagline":"A PHP 5.3+ library for generating RFC 4122 version 1, 3, 4, and 5 universally unique identifiers (UUID).","body":"Rhumsaa\\Uuid is a PHP 5.3+ library for generating and working with [RFC 4122][rfc4122] version\r\n1, 3, 4, and 5 universally unique identifiers (UUID).\r\n\r\nFrom [Wikipedia](http://en.wikipedia.org/wiki/Universally_unique_identifier):\r\n\r\n> The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination. In this context the word unique should be taken to mean \"practically unique\" rather than \"guaranteed unique\". Since the identifiers have a finite size, it is possible for two differing items to share the same identifier. The identifier size and generation process need to be selected so as to make this sufficiently improbable in practice. Anyone can create a UUID and use it to identify something with reasonable confidence that the same identifier will never be unintentionally created by anyone to identify something else. Information labeled with UUIDs can therefore be later combined into a single database without needing to resolve identifier (ID) conflicts.\r\n\r\nMuch inspiration for this library came from the [Java][javauuid] and\r\n[Python][pyuuid] UUID libraries.\r\n\r\nPlease see `docs/` for generated API documentation.\r\n\r\n## Requirements\r\n\r\nSome methods in this library have requirements due to integer size restrictions\r\non 32-bit and 64-bit builds of PHP. A 64-bit build of PHP and the [Moontoast\\Math][]\r\nlibrary are recommended. However, this library is designed to work on 32-bit\r\nbuilds of PHP without Moontoast\\Math, with some degraded functionality. Please\r\ncheck the API documention for more information.\r\n\r\nIf a particular requirement is not present, then a `Rhumsaa\\Uuid\\Exception\\UnsatisfiedDependencyException`\r\nis thrown, allowing one to catch a bad call in an environment where the call is\r\nnot supported and gracefully degrade.\r\n\r\n## Examples\r\n\r\n```php\r\n<?php\r\nrequire 'vendor/autoload.php';\r\n\r\nuse Rhumsaa\\Uuid\\Uuid;\r\nuse Rhumsaa\\Uuid\\Exception\\UnsatisfiedDependencyException;\r\n\r\ntry {\r\n\r\n    // Generate a version 1 (time-based) UUID\r\n    $uuid1 = Uuid::uuid1();\r\n    echo $uuid1 . \"\\n\"; // e4eaaaf2-d142-11e1-b3e4-080027620cdd\r\n\r\n    // Generate a version 3 (name-based and hashed with MD5) UUID\r\n    $uuid3 = Uuid::uuid3(Uuid::NAMESPACE_DNS, 'php.net');\r\n    echo $uuid3 . \"\\n\"; // 11a38b9a-b3da-360f-9353-a5a725514269\r\n\r\n    // Generate a version 4 (random) UUID\r\n    $uuid4 = Uuid::uuid4();\r\n    echo $uuid4 . \"\\n\"; // 25769c6c-d34d-4bfe-ba98-e0ee856f3e7a\r\n\r\n    // Generate a version 5 (name-based and hashed with SHA1) UUID\r\n    $uuid5 = Uuid::uuid5(Uuid::NAMESPACE_DNS, 'php.net');\r\n    echo $uuid5 . \"\\n\"; // c4a760a8-dbcf-5254-a0d9-6a4474bd1b62\r\n\r\n} catch (UnsatisfiedDependencyException $e) {\r\n\r\n    // Some dependency was not met. Either the method cannot be called on a\r\n    // 32-bit system, or it can, but it relies on Moontoast\\Math to be present.\r\n    echo 'Caught exception: ' . $e->getMessage() . \"\\n\";\r\n\r\n}\r\n```\r\n\r\n## Installation\r\n\r\nThe preferred method of installation is via [Packagist][], as this provides\r\nthe PSR-0 autoloader functionality. The following `composer.json` will download\r\nand install the latest version of the Uuid library into your project:\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"rhumsaa/uuid\": \"~2.4\"\r\n    }\r\n}\r\n```\r\n\r\n\r\n[rfc4122]: http://tools.ietf.org/html/rfc4122\r\n[javauuid]: http://docs.oracle.com/javase/6/docs/api/java/util/UUID.html\r\n[pyuuid]: http://docs.python.org/3/library/uuid.html\r\n[packagist]: http://packagist.org/\r\n[moontoast\\math]: https://github.com/moontoast/math","google":"UA-7239240-2","note":"Don't delete this file! It's used internally to help with page regeneration."}